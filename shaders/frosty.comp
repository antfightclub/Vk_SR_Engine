#version 450
layout(local_size_x = 16, local_size_y = 16) in;
layout(rgba16f, set = 0, binding = 0) uniform image2D image;

// Adapted from https://www.shadertoy.com/view/3c3XR8

layout (push_constant) uniform constants 
{
	vec4 data1;
	vec4 data2;
	vec4 data3;
	vec4 data4;
} PushConstants;

vec3 sampleColor(vec2 coord, float time, float freqMultiplier, vec3 offset) {
    return 0.5 + 0.5 * cos(time + coord.xyx * freqMultiplier + offset);
}

float hash(vec2 p) { return fract(sin(dot(p, vec2(127.1,311.7))) * 43758.5453123); }

float noise(vec2 p) {
    vec2 i = floor(p);
    vec2 f = fract(p);
    f = f * f * (3.0 - 2.0 * f);
    float a = hash(i);
    float b = hash(i + vec2(1.0, 0.0));
    float c = hash(i + vec2(0.0, 1.0));
    float d = hash(i + vec2(1.0, 1.0));
    return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);
}

float fbm(vec2 p) {
    float v = 0.0;
    float a = 0.5;
    for(int i = 0; i < 4; i++) {
        v += a * noise(p);
        p *= 2.0;
        a *= 0.5;
    }
    return v;
}

void mainImage(out vec4 fragColor, vec2 fragCoord)
{
	ivec2 size = imageSize(image);
    vec2 uv = fragCoord / size.xy;
    float animationSpeed = 1.0;
    float t = PushConstants.data1.x * animationSpeed; // Time is given by pushconstant data1.x
    
    vec3 color1 = sampleColor(uv, t, 1.0, vec3(0, 2, 4));
    vec3 color2 = sampleColor(uv, t * 0.7, 2.0, vec3(1, 3, 5));
    
    vec3 baseColor = mix(
        color1,
        color2,
        0.5 + 0.5 * sin(uv.x * 3.14 + t)
    );
    
    vec3 themeColor = vec3(0.8, 0.18, 0.471);
    baseColor = mix(baseColor, themeColor, 0.6);
    
    // Frosted glass effect
    vec2 distortedUV = uv * 0.5 + 0.5 * vec2(
        fbm(uv + t * 0.2),
        fbm(uv + t * 0.2 + 31.)
    );
    
    // Resample base color with distortion
    vec3 color3 = sampleColor(distortedUV, 1.0, 1.0, vec3(0, 2, 4));
    vec3 color4 = sampleColor(distortedUV, t * 0.7, 2.0, vec3(1, 3, 5));

    vec3 finalColor = mix(
        mix(color3, color4, 0.5 + 0.5 * sin((distortedUV.x + distortedUV.y) / 2.0 * 3.14 + t)),
        baseColor,
        0.7
    );
    
    // Glow
    finalColor += 0.05 * vec3(
        0.5 + 0.5 * sin(uv.y * 10.0 + t),
        0.5 + 0.5 * sin(uv.x * 8.0 + t * 1.1),
        0.5 + 0.5 * sin((uv.x + uv.y) * 9.0 + t * 0.9)
    );

    // Hide color banding with grain
    finalColor += (hash(fragCoord.xy + floor(t)) - 0.5) / 255.0;

    float desaturation = 0.75; // Range [0.0, 1.0]
    float luminance = dot(finalColor, vec3(0.299, 0.587, 0.114));
    finalColor = mix(finalColor, vec3(luminance), desaturation);
    
    fragColor = vec4(finalColor, 1.0);
}

void main() 
{
	vec4 value = vec4(0.0, 0.0, 0.0, 1.0);
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(image);
	if (texelCoord.x < size.x && texelCoord.y < size.y) 
	{
		vec4 color;
		mainImage(color, texelCoord);
		
		imageStore(image, texelCoord, color);
	}
}